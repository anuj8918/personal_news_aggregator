{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\OneDrive\\\\Desktop\\\\news\\\\news-aggregator\\\\src\\\\components\\\\NewsAggregator.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport axios from \"axios\";\nimport Container from \"./Container\";\nimport NewsGrid from \"./NewsGrid\";\nimport NewsCard from \"./NewsCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchNews = async ({\n  queryKey\n}) => {\n  const [, category, searchTerm] = queryKey;\n  const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || \"http://localhost:5001\";\n  const url = searchTerm ? `${BACKEND_URL}/api/news?category=${category}&search=${searchTerm}` : `${BACKEND_URL}/api/news?category=${category}`;\n  const response = await axios.get(url);\n  return response.data;\n};\nconst detectFakeNews = async (title, content) => {\n  const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || \"http://localhost:5001\";\n  const response = await axios.post(`${BACKEND_URL}/api/fake-news`, {\n    title,\n    content\n  });\n  return response.data.isFake;\n};\nconst NewsAggregator = () => {\n  _s();\n  const [category, setCategory] = useState(\"technology\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const {\n    data: news = [],\n    isLoading,\n    error\n  } = useQuery({\n    queryKey: [\"news\", category, searchTerm],\n    queryFn: fetchNews\n  });\n  const [fakeNewsStatuses, setFakeNewsStatuses] = useState({});\n  useEffect(() => {\n    const detectFakeNewsStatuses = async () => {\n      const results = {};\n      for (const [index, article] of news.entries()) {\n        const isFake = await detectFakeNews(article.title, article.description);\n        results[index] = isFake;\n      }\n      setFakeNewsStatuses(results);\n    };\n    if (news.length > 0) detectFakeNewsStatuses();\n  }, [news]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error loading news.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(NewsGrid, {\n      children: news.map((article, index) => /*#__PURE__*/_jsxDEV(NewsCard, {\n        article: article,\n        isFake: fakeNewsStatuses[index]\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(NewsAggregator, \"zvxsWptD9nPGyEgOzu8EFBQzJuI=\", false, function () {\n  return [useQuery];\n});\n_c = NewsAggregator;\nexport default NewsAggregator;\nvar _c;\n$RefreshReg$(_c, \"NewsAggregator\");","map":{"version":3,"names":["React","useState","useEffect","useQuery","axios","Container","NewsGrid","NewsCard","jsxDEV","_jsxDEV","fetchNews","queryKey","category","searchTerm","BACKEND_URL","process","env","REACT_APP_BACKEND_URL","url","response","get","data","detectFakeNews","title","content","post","isFake","NewsAggregator","_s","setCategory","setSearchTerm","news","isLoading","error","queryFn","fakeNewsStatuses","setFakeNewsStatuses","detectFakeNewsStatuses","results","index","article","entries","description","length","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["C:/Users/PC/OneDrive/Desktop/news/news-aggregator/src/components/NewsAggregator.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport axios from \"axios\";\r\nimport Container from \"./Container\";\r\nimport NewsGrid from \"./NewsGrid\";\r\nimport NewsCard from \"./NewsCard\";\r\n\r\nconst fetchNews = async ({ queryKey }: { queryKey: [string, string, string] }) => {\r\n  const [, category, searchTerm] = queryKey;\r\n  const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || \"http://localhost:5001\";\r\n  const url = searchTerm\r\n    ? `${BACKEND_URL}/api/news?category=${category}&search=${searchTerm}`\r\n    : `${BACKEND_URL}/api/news?category=${category}`;\r\n  const response = await axios.get(url);\r\n  return response.data;\r\n};\r\n\r\nconst detectFakeNews = async (title: string, content: string): Promise<boolean> => {\r\n  const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || \"http://localhost:5001\";\r\n  const response = await axios.post(`${BACKEND_URL}/api/fake-news`, { title, content });\r\n  return response.data.isFake;\r\n};\r\n\r\nconst NewsAggregator: React.FC = () => {\r\n  const [category, setCategory] = useState(\"technology\");\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const { data: news = [], isLoading, error } = useQuery<Array<{ title: string; description: string }>>({\r\n    queryKey: [\"news\", category, searchTerm],\r\n    queryFn: fetchNews,\r\n  });\r\n\r\n  const [fakeNewsStatuses, setFakeNewsStatuses] = useState<Record<number, boolean | null>>({});\r\n\r\n  useEffect(() => {\r\n    const detectFakeNewsStatuses = async () => {\r\n      const results: Record<number, boolean> = {};\r\n      for (const [index, article] of news.entries()) {\r\n        const isFake = await detectFakeNews(article.title, article.description);\r\n        results[index] = isFake;\r\n      }\r\n      setFakeNewsStatuses(results);\r\n    };\r\n    if (news.length > 0) detectFakeNewsStatuses();\r\n  }, [news]);\r\n\r\n  return (\r\n    <Container>\r\n      {isLoading ? (\r\n        <p>Loading...</p>\r\n      ) : error ? (\r\n        <p>Error loading news.</p>\r\n      ) : (\r\n        <NewsGrid>\r\n          {news.map((article, index) => (\r\n            <NewsCard key={index} article={article} isFake={fakeNewsStatuses[index]} />\r\n          ))}\r\n        </NewsGrid>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default NewsAggregator;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,SAAS,GAAG,MAAAA,CAAO;EAAEC;AAAiD,CAAC,KAAK;EAChF,MAAM,GAAGC,QAAQ,EAAEC,UAAU,CAAC,GAAGF,QAAQ;EACzC,MAAMG,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,IAAI,uBAAuB;EAChF,MAAMC,GAAG,GAAGL,UAAU,GAClB,GAAGC,WAAW,sBAAsBF,QAAQ,WAAWC,UAAU,EAAE,GACnE,GAAGC,WAAW,sBAAsBF,QAAQ,EAAE;EAClD,MAAMO,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAACF,GAAG,CAAC;EACrC,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,MAAMC,cAAc,GAAG,MAAAA,CAAOC,KAAa,EAAEC,OAAe,KAAuB;EACjF,MAAMV,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,IAAI,uBAAuB;EAChF,MAAME,QAAQ,GAAG,MAAMf,KAAK,CAACqB,IAAI,CAAC,GAAGX,WAAW,gBAAgB,EAAE;IAAES,KAAK;IAAEC;EAAQ,CAAC,CAAC;EACrF,OAAOL,QAAQ,CAACE,IAAI,CAACK,MAAM;AAC7B,CAAC;AAED,MAAMC,cAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrC,MAAM,CAAChB,QAAQ,EAAEiB,WAAW,CAAC,GAAG5B,QAAQ,CAAC,YAAY,CAAC;EACtD,MAAM,CAACY,UAAU,EAAEiB,aAAa,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAM;IAAEoB,IAAI,EAAEU,IAAI,GAAG,EAAE;IAAEC,SAAS;IAAEC;EAAM,CAAC,GAAG9B,QAAQ,CAAgD;IACpGQ,QAAQ,EAAE,CAAC,MAAM,EAAEC,QAAQ,EAAEC,UAAU,CAAC;IACxCqB,OAAO,EAAExB;EACX,CAAC,CAAC;EAEF,MAAM,CAACyB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnC,QAAQ,CAAiC,CAAC,CAAC,CAAC;EAE5FC,SAAS,CAAC,MAAM;IACd,MAAMmC,sBAAsB,GAAG,MAAAA,CAAA,KAAY;MACzC,MAAMC,OAAgC,GAAG,CAAC,CAAC;MAC3C,KAAK,MAAM,CAACC,KAAK,EAAEC,OAAO,CAAC,IAAIT,IAAI,CAACU,OAAO,CAAC,CAAC,EAAE;QAC7C,MAAMf,MAAM,GAAG,MAAMJ,cAAc,CAACkB,OAAO,CAACjB,KAAK,EAAEiB,OAAO,CAACE,WAAW,CAAC;QACvEJ,OAAO,CAACC,KAAK,CAAC,GAAGb,MAAM;MACzB;MACAU,mBAAmB,CAACE,OAAO,CAAC;IAC9B,CAAC;IACD,IAAIP,IAAI,CAACY,MAAM,GAAG,CAAC,EAAEN,sBAAsB,CAAC,CAAC;EAC/C,CAAC,EAAE,CAACN,IAAI,CAAC,CAAC;EAEV,oBACEtB,OAAA,CAACJ,SAAS;IAAAuC,QAAA,EACPZ,SAAS,gBACRvB,OAAA;MAAAmC,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GACff,KAAK,gBACPxB,OAAA;MAAAmC,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAE1BvC,OAAA,CAACH,QAAQ;MAAAsC,QAAA,EACNb,IAAI,CAACkB,GAAG,CAAC,CAACT,OAAO,EAAED,KAAK,kBACvB9B,OAAA,CAACF,QAAQ;QAAaiC,OAAO,EAAEA,OAAQ;QAACd,MAAM,EAAES,gBAAgB,CAACI,KAAK;MAAE,GAAzDA,KAAK;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAsD,CAC3E;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACM;EACX;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEhB,CAAC;AAACpB,EAAA,CAtCID,cAAwB;EAAA,QAIkBxB,QAAQ;AAAA;AAAA+C,EAAA,GAJlDvB,cAAwB;AAwC9B,eAAeA,cAAc;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}